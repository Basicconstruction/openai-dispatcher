// <auto-generated />
using System;
using Dispatcher.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Dispatcher.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230822074232_update8223")]
    partial class update8223
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Dispatcher.Models.KeyUser", b =>
                {
                    b.Property<long>("KeyUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("KeyUserId"), 1L, 1);

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(16,8)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KeyUserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Dispatcher.Models.OpenKey", b =>
                {
                    b.Property<long>("OpenKeyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("OpenKeyId"), 1L, 1);

                    b.Property<bool?>("Available")
                        .HasColumnType("bit");

                    b.Property<int?>("AvailableRequest")
                        .HasColumnType("int");

                    b.Property<long?>("AvailableRequestToken")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("Balance")
                        .HasColumnType("decimal(16,8)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("KeyUserId")
                        .HasColumnType("int");

                    b.Property<long?>("KeyUserId1")
                        .HasColumnType("bigint");

                    b.Property<int?>("PricingMethod")
                        .HasColumnType("int");

                    b.HasKey("OpenKeyId");

                    b.HasIndex("KeyUserId1");

                    b.ToTable("OpenKeys");
                });

            modelBuilder.Entity("Dispatcher.Models.PoolKey", b =>
                {
                    b.Property<long>("PoolKeyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PoolKeyId"), 1L, 1);

                    b.Property<bool?>("Available")
                        .HasColumnType("bit");

                    b.Property<string>("Cipher")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HandHosts")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hosts")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.HasKey("PoolKeyId");

                    b.ToTable("PoolKeys");
                });

            modelBuilder.Entity("Dispatcher.Models.OpenKey", b =>
                {
                    b.HasOne("Dispatcher.Models.KeyUser", "KeyUser")
                        .WithMany("OpenKeys")
                        .HasForeignKey("KeyUserId1");

                    b.Navigation("KeyUser");
                });

            modelBuilder.Entity("Dispatcher.Models.KeyUser", b =>
                {
                    b.Navigation("OpenKeys");
                });
#pragma warning restore 612, 618
        }
    }
}
